class Solution {
private:
    vector<int> parents;
    vector<int> sizes;
    int find(int node) {
        while (parents[node] != node) {
            node = parents[node];
        }
        return node;
    }
    
    void uni(int n1, int n2) {
        if (find(n1) == find(n2)) {
            return;
        }
        sizes[find(n2)] += sizes[find(n1)];
        parents[find(n1)] = find(n2);
    }
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        // uf with number of elements
        // only select from node in the init list not living in the same tree
        // first pass build uf
        // second pass record size on roots
        // first pass on init list, record malware count on roots
        // second pass on init list, pick largest size with malware count 1
        int n = graph.size();
        parents.reserve(n);
        sizes.resize(n, 1);
        for (int i = 0; i < n; i++) {
            parents[i] = i;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1) {
                    uni(i, j);
                }
            }
        }
        vector<int> malware_cnt(n, 0);
        for (int i = 0; i < initial.size(); i ++) {
            malware_cnt[find(initial[i])] ++;
        }
        int pick_index = initial[0];
        int max_save = -1;
        for (int i = 0; i < initial.size(); i ++) {
            int save = sizes[find(initial[i])];
            if (malware_cnt[find(initial[i])] > 1) {
                save = -1;
            }
            if (save > max_save || (save == max_save && initial[i] < pick_index)) {
                max_save = save;
                pick_index = initial[i];
            }
        }
        return pick_index;
    }
};
